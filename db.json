{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/header.jpg","path":"image/header.jpg","modified":0,"renderable":0},{"_id":"source/image/yourname.jpeg","path":"image/yourname.jpeg","modified":0,"renderable":0},{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Anisina/.gitignore","hash":"7a2d5c9a8f18e75645eabbeacbf0ee83ba15e854","modified":1550239133331},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1550239133331},{"_id":"themes/Anisina/README.md","hash":"6090746aeee0e5ad4ad0107b85e808e6f3937f98","modified":1550239133335},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1550239133447},{"_id":"source/_posts/Git推送时避免重复输入密码.md","hash":"a2562c6ba1666695cda30e21de39d9af77fd79fd","modified":1550231604370},{"_id":"source/_posts/pip的代理设置.md","hash":"0b0c780ab7a52e8b8d997b87f5170745ecbb3aed","modified":1550231604370},{"_id":"source/_posts/vim配置.md","hash":"f56e934e229e7fd4d9cb1e50b77ac4777ba239c9","modified":1550231604370},{"_id":"source/_posts/your-post-name.md","hash":"4947e7b038a0960c12249ade2949989211899ef8","modified":1550259133753},{"_id":"source/_posts/为Git设置代理.md","hash":"36d1f753927b32591cb98cb542c67b0435e6355c","modified":1550231604370},{"_id":"source/_posts/灯下漫笔.md","hash":"15314850f21652913ff3e7836480f09004a349f5","modified":1550231604370},{"_id":"source/about/index.md","hash":"d7e13d144dd371687366993ca5aa6e7938574cf8","modified":1550300808524},{"_id":"source/image/header.jpg","hash":"6f8bcaafcc549709840ab090b058b6b1ebc70c72","modified":1550241302000},{"_id":"source/image/yourname.jpeg","hash":"1add25018a8cd98e57531258b18eb61679e71c5a","modified":1550257553000},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1550239133226},{"_id":"themes/Anisina/.git/config","hash":"34da9422497bf112885ff69d41ae9b25aa411184","modified":1550239133230},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1550239008117},{"_id":"themes/Anisina/.git/index","hash":"3e86d86bedba7f8063e5dade1b9e312fd2c8fc04","modified":1550303144380},{"_id":"themes/Anisina/.git/packed-refs","hash":"0fa2e78a5f97ddee1df5fae545f04559457a4be8","modified":1550239133222},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1550239133339},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1550239133367},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1550239133367},{"_id":"themes/Anisina/layout/.DS_Store","hash":"fd623c7cbe0d8fd902f6ca242127fd8db7da6c18","modified":1550239133367},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1550239133443},{"_id":"themes/Anisina/layout/categories.ejs","hash":"055ac64a3ba036e29ff984fd886d57d580bbbff6","modified":1550239133443},{"_id":"themes/Anisina/layout/index.ejs","hash":"a0eaee13571e79c3632e23a9e94ccc991761d1f5","modified":1550239133443},{"_id":"themes/Anisina/layout/layout.ejs","hash":"b728827bf3ec55baf96a882032397e6c74c65f34","modified":1550239133443},{"_id":"themes/Anisina/layout/page.ejs","hash":"e9990327469aa94a98a3dae92bdc9326a5b99c8a","modified":1550239133443},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1550239133443},{"_id":"themes/Anisina/layout/post.ejs","hash":"05203c1f8414ffc237a00be77a156264df2c7971","modified":1550239133447},{"_id":"themes/Anisina/layout/tags.ejs","hash":"a5b73e70540e12532aa92f12609b3a937a8bc28b","modified":1550239133447},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1550239133447},{"_id":"themes/Anisina/_config.yml","hash":"5baf18c53f7635cd35aa5a8dab8abc08251023ce","modified":1550303144356},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1550239008065},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1550239008117},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1550239008113},{"_id":"source/my-works/index.md","hash":"2e01757c8d4640fe45b8ea608c0a42707b16ae6b","modified":1550258673426},{"_id":"source/_data/project.json","hash":"0575e9c2b1917302d536aa9f8fc5e220dae4c166","modified":1550258864210},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1550239008117},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1550239133335},{"_id":"source/tags/index.md","hash":"6d771b47a0671e5f0330c6784c945e276c2bc7bf","modified":1550239573089},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"57a3ad1dc43a47a4558eb69872441d870b174238","modified":1550239133443},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1550239133443},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1550239133443},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1550239133443},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"c6830e31138e412c2aa05228c4cd6035063fe651","modified":1550239133447},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1550239133451},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1550239133451},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1550239133455},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1550239133455},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1550239133455},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1550239133455},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1550239133459},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1550239133575},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1550239133575},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"a4e0a6e726452e8774dac8bf5c7b00def89be784","modified":1550303144284},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1550239133447},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1550239133455},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1550239133575},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1550239133367},{"_id":"themes/Anisina/.git/objects/pack/pack-795e8c7dbb40932736480b91f18f341ed1549de4.idx","hash":"224bfba8c7b05139e60100945d6f955d8836c64d","modified":1550239132693},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"c1f0a188093ebb518ce47b7ff6e8c279c8ff3f9c","modified":1550239133226},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1550239008117},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1550239133347},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1550239133567},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"a4e0a6e726452e8774dac8bf5c7b00def89be784","modified":1550303144284},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1550239133226},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1550239133355},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"a4e0a6e726452e8774dac8bf5c7b00def89be784","modified":1550303144284},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1550239133363},{"_id":"themes/Anisina/.git/objects/pack/pack-795e8c7dbb40932736480b91f18f341ed1549de4.pack","hash":"92646259198aabc4ae46d367639472f498a939fd","modified":1550239132693}],"Category":[],"Data":[{"_id":"project","data":{"一段话":{"title":"这是一个标题","subTitle":"这是一个副标题","img_link":" ","use":["java"],"link":"","data":"2019.01-01","direction":"关于work的一个测试"},"一段话2":{"title":"这是一个标题2","subTitle":"基于 这是一个副标题2","img_link":"","use":["java","mysql","spring"],"link":"","data":"2018.01-01","direction":"关于work的一个测试"}}}],"Page":[{"title":"my works","date":"2019-02-15T19:23:43.000Z","layout":"works","_content":"","source":"my-works/index.md","raw":"---\ntitle: my works\ndate: 2019-02-16 03:23:43\nlayout: works\n---\n","updated":"2019-02-15T19:24:33.426Z","path":"my-works/index.html","comments":1,"_id":"cjs6g9pt3000iyjfj0hbj92qh","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-12T01:53:30.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-12 09:53:30\nlayout: tags\n---\n","updated":"2019-02-15T14:06:13.089Z","path":"tags/index.html","comments":1,"_id":"cjs6g9pti000jyjfjksymyqi1","content":"","excerpt":"","more":""}],"Post":[{"title":"Git推送时避免重复输入密码","date":"2016-06-20T03:08:36.000Z","_content":"当我们选用https的方式连接git服务器时，每推送一次就要输入一次密码，非常的麻烦。\n<!-- more -->\n如果不想用ssh连接，我们可以输入以下的命令避免重复输入密码：\n~~~\ngit config --global user.name \"your name \"\ngit config --global user.email youremail@exampal.com\ngit config --global credential.helper store\n~~~\n该命令存储密码缓存，执行后还需要再输一次。\n","source":"_posts/Git推送时避免重复输入密码.md","raw":"---\ntitle: Git推送时避免重复输入密码\ndate: 2016-6-20 11:08:36\ntags:\n- Git\n---\n当我们选用https的方式连接git服务器时，每推送一次就要输入一次密码，非常的麻烦。\n<!-- more -->\n如果不想用ssh连接，我们可以输入以下的命令避免重复输入密码：\n~~~\ngit config --global user.name \"your name \"\ngit config --global user.email youremail@exampal.com\ngit config --global credential.helper store\n~~~\n该命令存储密码缓存，执行后还需要再输一次。\n","slug":"Git推送时避免重复输入密码","published":1,"updated":"2019-02-15T11:53:24.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs6g9ps70000yjfjprecy7hf","content":"<p>当我们选用https的方式连接git服务器时，每推送一次就要输入一次密码，非常的麻烦。<br><a id=\"more\"></a><br>如果不想用ssh连接，我们可以输入以下的命令避免重复输入密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;your name &quot;</div><div class=\"line\">git config --global user.email youremail@exampal.com</div><div class=\"line\">git config --global credential.helper store</div></pre></td></tr></table></figure></p>\n<p>该命令存储密码缓存，执行后还需要再输一次。</p>\n","excerpt":"<p>当我们选用https的方式连接git服务器时，每推送一次就要输入一次密码，非常的麻烦。<br>","more":"<br>如果不想用ssh连接，我们可以输入以下的命令避免重复输入密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;your name &quot;</div><div class=\"line\">git config --global user.email youremail@exampal.com</div><div class=\"line\">git config --global credential.helper store</div></pre></td></tr></table></figure></p>\n<p>该命令存储密码缓存，执行后还需要再输一次。</p>"},{"title":"pip的代理设置","date":"2016-11-14T09:35:34.000Z","_content":"pip命令只支持http的代理，为pip设置socks代理需要其他的方法。\n<! -- more -->\n使用proxychains等前置代理工具，安装proxychains\n~~~\n$ sudo apt-get install proxychains\n~~~\n配置`/etc/proxychains.conf`,加入\n~~~\nsocks5 127.0.0.1 1080 (你的本地代理地址）\n~~~\n安装方式\n~~~\n$ proxychains pip install <package>\n~~~\n","source":"_posts/pip的代理设置.md","raw":"---\ntitle: pip的代理设置\ndate: 2016-11-14 17:35:34\ntags:\n- Python\n---\npip命令只支持http的代理，为pip设置socks代理需要其他的方法。\n<! -- more -->\n使用proxychains等前置代理工具，安装proxychains\n~~~\n$ sudo apt-get install proxychains\n~~~\n配置`/etc/proxychains.conf`,加入\n~~~\nsocks5 127.0.0.1 1080 (你的本地代理地址）\n~~~\n安装方式\n~~~\n$ proxychains pip install <package>\n~~~\n","slug":"pip的代理设置","published":1,"updated":"2019-02-15T11:53:24.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs6g9psg0002yjfjl1tzpjl5","content":"<p>pip命令只支持http的代理，为pip设置socks代理需要其他的方法。<br>&lt;! – more –&gt;<br>使用proxychains等前置代理工具，安装proxychains<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install proxychains</div></pre></td></tr></table></figure></p>\n<p>配置<code>/etc/proxychains.conf</code>,加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5 127.0.0.1 1080 (你的本地代理地址）</div></pre></td></tr></table></figure></p>\n<p>安装方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ proxychains pip install &lt;package&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>pip命令只支持http的代理，为pip设置socks代理需要其他的方法。<br>&lt;! – more –&gt;<br>使用proxychains等前置代理工具，安装proxychains<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install proxychains</div></pre></td></tr></table></figure></p>\n<p>配置<code>/etc/proxychains.conf</code>,加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socks5 127.0.0.1 1080 (你的本地代理地址）</div></pre></td></tr></table></figure></p>\n<p>安装方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ proxychains pip install &lt;package&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"Vim配置","date":"2016-11-13T02:25:50.000Z","_content":"对vim进行界面配置，以适应不同开发者的开发需求。\n<!-- more -->\n## 基本配置\n你只要在Home目录下创建一个~/vimrc文件就可以配置vim了，如果想要所有用户生效，请修改/etc/vimrc。\n###常用配置命令\n~~~\nset nocompatible \" 关闭 vi 兼容模式\nsyntax on \" 自动语法高亮\ncolorscheme molokai \" 设定配色方案\nset number \" 显示行号\nset cursorline \" 突出显示当前行\nset ruler \" 打开状态栏标尺\nset shiftwidth=4 \" 设定 << 和 >> 命令移动时的宽度为 4\nset softtabstop=4 \" 使得按退格键时可以一次删掉 4 个空格\nset tabstop=4 \" 设定 tab 长度为 4\nset nobackup \" 覆盖文件时不备份\nset autochdir \" 自动切换当前目录为当前文件所在的目录\nfiletype plugin indent on \" 开启插件\nset backupcopy=yes \" 设置备份时的行为为覆盖\nset ignorecase smartcase \" 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感\nset nowrapscan \" 禁止在搜索到文件两端时重新搜索\nset incsearch \" 输入搜索内容时就显示搜索结果\nset hlsearch \" 搜索时高亮显示被找到的文本\nset noerrorbells \" 关闭错误信息响铃\nset novisualbell \" 关闭使用可视响铃代替呼叫\nset t_vb= \" 置空错误铃声的终端代码\n\" set showmatch \" 插入括号时，短暂地跳转到匹配的对应括号\n\" set matchtime=2 \" 短暂跳转到匹配括号的时间\nset magic \" 设置魔术\nset hidden \" 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存\nset guioptions-=T \" 隐藏工具栏\nset guioptions-=m \" 隐藏菜单栏\nset smartindent \" 开启新行时使用智能自动缩进\nset backspace=indent,eol,start\n\" 不设定在插入状态无法用退格键和 Delete 键删除回车符\nset cmdheight=1 \" 设定命令行的行数为 1\nset laststatus=2 \" 显示状态栏 (默认值为 1, 无法显示状态栏)\nset statusline=\\ %<%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%{&fileformat}\\ %{&encoding}\\ %c:%l/%L%)\\ \n\" 设置在状态行显示的信息\nset foldenable \" 开始折叠\nset foldmethod=syntax \" 设置语法折叠\nset foldcolumn=0 \" 设置折叠区域的宽度\nsetlocal foldlevel=1 \" 设置折叠层数为\n\" set foldclose=all \" 设置为自动关闭折叠 \n\" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\" 用空格键来开关折叠\n~~~\n### 一键执行\n很多时候完成代码后都要返回命令行执行，有时候会很麻烦，这时一键执行就实用很多。\n~~~\nmap <F9> :call CompileRunGcc()<CR>\nfunc! CompileRunGcc()\n    exec \"w\"\n    if &filetype == 'c'\n        exec \"!g++ % -o %<\"\n        exec \"!time ./%<\"\n    elseif &filetype == 'cpp'\n        exec \"!g++ % -o %<\"\n        exec \"!time ./%<\"\n    elseif &filetype == 'java'\n        exec \"!javac %\"\n        exec \"!time java %<\"\n    elseif &filetype == 'sh'\n        :!time bash %\n    elseif &filetype == 'python'\n        exec \"!time python2.7 %\"\n    elseif &filetype == 'html'\n        exec \"!firefox % &\"\n    elseif &filetype == 'mkd'\n        exec \"!~/.vim/markdown.pl % > %.html &\"\n        exec \"!firefox %.html &\"\n    endif\nendfunc\n~~~\n另外一种方法：\n`au BufRead *.py map <buffer> <F9> :w<CR>:!/usr/bin/env python % <CR>`\n## 插件管理与Vundle\n插件的管理是vim配置中非常重要的一个内容，因为单纯的修改.vimrc并不能完全满足我们的需求，这时候我们就需要插件了。而在插件管理上现在最常用的有Vundle，pathon等。这里我们暂时只记录Vundle插件管理工具的配置过程。\n### Vundle安装\n~~~\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n~~~\n### 配置\n将以下的命令置入你的.vimrc文件中，可以根据注释移除你不想要的插件。\n~~~\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\nPlugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Install L9 and avoid a Naming conflict if you've already installed a\n\" different version somewhere else.\nPlugin 'ascenator/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n~~~\n### 安装插件\n在Vim的命令行运行`:PluginInstall`\n也可以在shell的命令行运行:`vim +PluginInstall +qall`\n## 插件的推荐\n### NERD Tree\nNERD Tree是一个树形目录插件，方便浏览当前目录有哪些目录和文件。\n在~/.vimrc文件中配置NERD Tree，设置一个启用或禁用NERD Tree的键映射\n~~~\n\"F5开启关闭树\"\nnmap <F5> :NERDTreeToggle<cr>\nlet NERDTreeChDirMode=1\n\"显示书签\"\nlet NERDTreeShowBookmarks=1\n\"设置忽略文件类型\"\nlet NERDTreeIgnore=['\\~$', '\\.pyc$', '\\.swp$']\n\"窗口大小\"\nlet NERDTreeWinSize=25\n~~~\n所以可以通过F5快捷启动或关闭树形目录。\nNERD Tree提供一些常用快捷键来操作目录：\n\n通过hjkl来移动光标\no打开关闭文件或目录，如果想打开文件，必须光标移动到文件名\nt在标签页中打开\ns和i可以水平或纵向分割窗口打开文件\np到上层目录\nP到根目录\nK到同目录第一个节点\nP到同目录最后一个节点\n\n### 代码折叠\n很多的IDE都提供对方法和类进行折叠的手段，只显示定义而不显示全部代码。\n我们可以在.vimrc中添加下面的代码开启功能:\n~~~\n\" Enable folding\nset foldmethod=indent\nset foldlevel=99\n\" Enable folding with the spacebar\nnnoremap <space> za\n~~~\n这样空格键可以折叠了。\n我们还可以使用插件SimplyFold。\n在.vimrc中加入下面的代码，通过Vundle进行安装:\n`Plugin 'tmhedberg/SimpylFold'`\n如果想要看到折叠代码的文档字符串\n`let g:SimpylFold_docstring_preview=1`\n\n\n\n","source":"_posts/vim配置.md","raw":"---\ntitle: Vim配置\ndate: 2016-11-13 10:25:50\ntags:\n- vim\n---\n对vim进行界面配置，以适应不同开发者的开发需求。\n<!-- more -->\n## 基本配置\n你只要在Home目录下创建一个~/vimrc文件就可以配置vim了，如果想要所有用户生效，请修改/etc/vimrc。\n###常用配置命令\n~~~\nset nocompatible \" 关闭 vi 兼容模式\nsyntax on \" 自动语法高亮\ncolorscheme molokai \" 设定配色方案\nset number \" 显示行号\nset cursorline \" 突出显示当前行\nset ruler \" 打开状态栏标尺\nset shiftwidth=4 \" 设定 << 和 >> 命令移动时的宽度为 4\nset softtabstop=4 \" 使得按退格键时可以一次删掉 4 个空格\nset tabstop=4 \" 设定 tab 长度为 4\nset nobackup \" 覆盖文件时不备份\nset autochdir \" 自动切换当前目录为当前文件所在的目录\nfiletype plugin indent on \" 开启插件\nset backupcopy=yes \" 设置备份时的行为为覆盖\nset ignorecase smartcase \" 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感\nset nowrapscan \" 禁止在搜索到文件两端时重新搜索\nset incsearch \" 输入搜索内容时就显示搜索结果\nset hlsearch \" 搜索时高亮显示被找到的文本\nset noerrorbells \" 关闭错误信息响铃\nset novisualbell \" 关闭使用可视响铃代替呼叫\nset t_vb= \" 置空错误铃声的终端代码\n\" set showmatch \" 插入括号时，短暂地跳转到匹配的对应括号\n\" set matchtime=2 \" 短暂跳转到匹配括号的时间\nset magic \" 设置魔术\nset hidden \" 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存\nset guioptions-=T \" 隐藏工具栏\nset guioptions-=m \" 隐藏菜单栏\nset smartindent \" 开启新行时使用智能自动缩进\nset backspace=indent,eol,start\n\" 不设定在插入状态无法用退格键和 Delete 键删除回车符\nset cmdheight=1 \" 设定命令行的行数为 1\nset laststatus=2 \" 显示状态栏 (默认值为 1, 无法显示状态栏)\nset statusline=\\ %<%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%{&fileformat}\\ %{&encoding}\\ %c:%l/%L%)\\ \n\" 设置在状态行显示的信息\nset foldenable \" 开始折叠\nset foldmethod=syntax \" 设置语法折叠\nset foldcolumn=0 \" 设置折叠区域的宽度\nsetlocal foldlevel=1 \" 设置折叠层数为\n\" set foldclose=all \" 设置为自动关闭折叠 \n\" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>\n\" 用空格键来开关折叠\n~~~\n### 一键执行\n很多时候完成代码后都要返回命令行执行，有时候会很麻烦，这时一键执行就实用很多。\n~~~\nmap <F9> :call CompileRunGcc()<CR>\nfunc! CompileRunGcc()\n    exec \"w\"\n    if &filetype == 'c'\n        exec \"!g++ % -o %<\"\n        exec \"!time ./%<\"\n    elseif &filetype == 'cpp'\n        exec \"!g++ % -o %<\"\n        exec \"!time ./%<\"\n    elseif &filetype == 'java'\n        exec \"!javac %\"\n        exec \"!time java %<\"\n    elseif &filetype == 'sh'\n        :!time bash %\n    elseif &filetype == 'python'\n        exec \"!time python2.7 %\"\n    elseif &filetype == 'html'\n        exec \"!firefox % &\"\n    elseif &filetype == 'mkd'\n        exec \"!~/.vim/markdown.pl % > %.html &\"\n        exec \"!firefox %.html &\"\n    endif\nendfunc\n~~~\n另外一种方法：\n`au BufRead *.py map <buffer> <F9> :w<CR>:!/usr/bin/env python % <CR>`\n## 插件管理与Vundle\n插件的管理是vim配置中非常重要的一个内容，因为单纯的修改.vimrc并不能完全满足我们的需求，这时候我们就需要插件了。而在插件管理上现在最常用的有Vundle，pathon等。这里我们暂时只记录Vundle插件管理工具的配置过程。\n### Vundle安装\n~~~\n$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n~~~\n### 配置\n将以下的命令置入你的.vimrc文件中，可以根据注释移除你不想要的插件。\n~~~\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\nPlugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/gmarik/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Install L9 and avoid a Naming conflict if you've already installed a\n\" different version somewhere else.\nPlugin 'ascenator/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n~~~\n### 安装插件\n在Vim的命令行运行`:PluginInstall`\n也可以在shell的命令行运行:`vim +PluginInstall +qall`\n## 插件的推荐\n### NERD Tree\nNERD Tree是一个树形目录插件，方便浏览当前目录有哪些目录和文件。\n在~/.vimrc文件中配置NERD Tree，设置一个启用或禁用NERD Tree的键映射\n~~~\n\"F5开启关闭树\"\nnmap <F5> :NERDTreeToggle<cr>\nlet NERDTreeChDirMode=1\n\"显示书签\"\nlet NERDTreeShowBookmarks=1\n\"设置忽略文件类型\"\nlet NERDTreeIgnore=['\\~$', '\\.pyc$', '\\.swp$']\n\"窗口大小\"\nlet NERDTreeWinSize=25\n~~~\n所以可以通过F5快捷启动或关闭树形目录。\nNERD Tree提供一些常用快捷键来操作目录：\n\n通过hjkl来移动光标\no打开关闭文件或目录，如果想打开文件，必须光标移动到文件名\nt在标签页中打开\ns和i可以水平或纵向分割窗口打开文件\np到上层目录\nP到根目录\nK到同目录第一个节点\nP到同目录最后一个节点\n\n### 代码折叠\n很多的IDE都提供对方法和类进行折叠的手段，只显示定义而不显示全部代码。\n我们可以在.vimrc中添加下面的代码开启功能:\n~~~\n\" Enable folding\nset foldmethod=indent\nset foldlevel=99\n\" Enable folding with the spacebar\nnnoremap <space> za\n~~~\n这样空格键可以折叠了。\n我们还可以使用插件SimplyFold。\n在.vimrc中加入下面的代码，通过Vundle进行安装:\n`Plugin 'tmhedberg/SimpylFold'`\n如果想要看到折叠代码的文档字符串\n`let g:SimpylFold_docstring_preview=1`\n\n\n\n","slug":"vim配置","published":1,"updated":"2019-02-15T11:53:24.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs6g9psl0004yjfjpzfpord9","content":"<p>对vim进行界面配置，以适应不同开发者的开发需求。<br><a id=\"more\"></a></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><p>你只要在Home目录下创建一个~/vimrc文件就可以配置vim了，如果想要所有用户生效，请修改/etc/vimrc。</p>\n<p>###常用配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible &quot; 关闭 vi 兼容模式</div><div class=\"line\">syntax on &quot; 自动语法高亮</div><div class=\"line\">colorscheme molokai &quot; 设定配色方案</div><div class=\"line\">set number &quot; 显示行号</div><div class=\"line\">set cursorline &quot; 突出显示当前行</div><div class=\"line\">set ruler &quot; 打开状态栏标尺</div><div class=\"line\">set shiftwidth=4 &quot; 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</div><div class=\"line\">set softtabstop=4 &quot; 使得按退格键时可以一次删掉 4 个空格</div><div class=\"line\">set tabstop=4 &quot; 设定 tab 长度为 4</div><div class=\"line\">set nobackup &quot; 覆盖文件时不备份</div><div class=\"line\">set autochdir &quot; 自动切换当前目录为当前文件所在的目录</div><div class=\"line\">filetype plugin indent on &quot; 开启插件</div><div class=\"line\">set backupcopy=yes &quot; 设置备份时的行为为覆盖</div><div class=\"line\">set ignorecase smartcase &quot; 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感</div><div class=\"line\">set nowrapscan &quot; 禁止在搜索到文件两端时重新搜索</div><div class=\"line\">set incsearch &quot; 输入搜索内容时就显示搜索结果</div><div class=\"line\">set hlsearch &quot; 搜索时高亮显示被找到的文本</div><div class=\"line\">set noerrorbells &quot; 关闭错误信息响铃</div><div class=\"line\">set novisualbell &quot; 关闭使用可视响铃代替呼叫</div><div class=\"line\">set t_vb= &quot; 置空错误铃声的终端代码</div><div class=\"line\">&quot; set showmatch &quot; 插入括号时，短暂地跳转到匹配的对应括号</div><div class=\"line\">&quot; set matchtime=2 &quot; 短暂跳转到匹配括号的时间</div><div class=\"line\">set magic &quot; 设置魔术</div><div class=\"line\">set hidden &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</div><div class=\"line\">set guioptions-=T &quot; 隐藏工具栏</div><div class=\"line\">set guioptions-=m &quot; 隐藏菜单栏</div><div class=\"line\">set smartindent &quot; 开启新行时使用智能自动缩进</div><div class=\"line\">set backspace=indent,eol,start</div><div class=\"line\">&quot; 不设定在插入状态无法用退格键和 Delete 键删除回车符</div><div class=\"line\">set cmdheight=1 &quot; 设定命令行的行数为 1</div><div class=\"line\">set laststatus=2 &quot; 显示状态栏 (默认值为 1, 无法显示状态栏)</div><div class=\"line\">set statusline=\\ %&lt;%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%&#123;&amp;fileformat&#125;\\ %&#123;&amp;encoding&#125;\\ %c:%l/%L%)\\ </div><div class=\"line\">&quot; 设置在状态行显示的信息</div><div class=\"line\">set foldenable &quot; 开始折叠</div><div class=\"line\">set foldmethod=syntax &quot; 设置语法折叠</div><div class=\"line\">set foldcolumn=0 &quot; 设置折叠区域的宽度</div><div class=\"line\">setlocal foldlevel=1 &quot; 设置折叠层数为</div><div class=\"line\">&quot; set foldclose=all &quot; 设置为自动关闭折叠 </div><div class=\"line\">&quot; nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</div><div class=\"line\">&quot; 用空格键来开关折叠</div></pre></td></tr></table></figure></p>\n<h3 id=\"一键执行\"><a href=\"#一键执行\" class=\"headerlink\" title=\"一键执行\"></a>一键执行</h3><p>很多时候完成代码后都要返回命令行执行，有时候会很麻烦，这时一键执行就实用很多。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">map &lt;F9&gt; :call CompileRunGcc()&lt;CR&gt;</div><div class=\"line\">func! CompileRunGcc()</div><div class=\"line\">    exec &quot;w&quot;</div><div class=\"line\">    if &amp;filetype == &apos;c&apos;</div><div class=\"line\">        exec &quot;!g++ % -o %&lt;&quot;</div><div class=\"line\">        exec &quot;!time ./%&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;cpp&apos;</div><div class=\"line\">        exec &quot;!g++ % -o %&lt;&quot;</div><div class=\"line\">        exec &quot;!time ./%&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;java&apos;</div><div class=\"line\">        exec &quot;!javac %&quot;</div><div class=\"line\">        exec &quot;!time java %&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;sh&apos;</div><div class=\"line\">        :!time bash %</div><div class=\"line\">    elseif &amp;filetype == &apos;python&apos;</div><div class=\"line\">        exec &quot;!time python2.7 %&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;html&apos;</div><div class=\"line\">        exec &quot;!firefox % &amp;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;mkd&apos;</div><div class=\"line\">        exec &quot;!~/.vim/markdown.pl % &gt; %.html &amp;&quot;</div><div class=\"line\">        exec &quot;!firefox %.html &amp;&quot;</div><div class=\"line\">    endif</div><div class=\"line\">endfunc</div></pre></td></tr></table></figure></p>\n<p>另外一种方法：<br><code>au BufRead *.py map &lt;buffer&gt; &lt;F9&gt; :w&lt;CR&gt;:!/usr/bin/env python % &lt;CR&gt;</code></p>\n<h2 id=\"插件管理与Vundle\"><a href=\"#插件管理与Vundle\" class=\"headerlink\" title=\"插件管理与Vundle\"></a>插件管理与Vundle</h2><p>插件的管理是vim配置中非常重要的一个内容，因为单纯的修改.vimrc并不能完全满足我们的需求，这时候我们就需要插件了。而在插件管理上现在最常用的有Vundle，pathon等。这里我们暂时只记录Vundle插件管理工具的配置过程。</p>\n<h3 id=\"Vundle安装\"><a href=\"#Vundle安装\" class=\"headerlink\" title=\"Vundle安装\"></a>Vundle安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>将以下的命令置入你的.vimrc文件中，可以根据注释移除你不想要的插件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</div><div class=\"line\">&quot;call vundle#begin(&apos;~/some/path/here&apos;)</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; The following are examples of different formats supported.</div><div class=\"line\">&quot; Keep Plugin commands between vundle#begin/end.</div><div class=\"line\">&quot; plugin on GitHub repo</div><div class=\"line\">Plugin &apos;tpope/vim-fugitive&apos;</div><div class=\"line\">&quot; plugin from http://vim-scripts.org/vim/scripts.html</div><div class=\"line\">Plugin &apos;L9&apos;</div><div class=\"line\">&quot; Git plugin not hosted on GitHub</div><div class=\"line\">Plugin &apos;git://git.wincent.com/command-t.git&apos;</div><div class=\"line\">&quot; git repos on your local machine (i.e. when working on your own plugin)</div><div class=\"line\">Plugin &apos;file:///home/gmarik/path/to/plugin&apos;</div><div class=\"line\">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</div><div class=\"line\">&quot; Pass the path to set the runtimepath properly.</div><div class=\"line\">Plugin &apos;rstacruz/sparkup&apos;, &#123;&apos;rtp&apos;: &apos;vim/&apos;&#125;</div><div class=\"line\">&quot; Install L9 and avoid a Naming conflict if you&apos;ve already installed a</div><div class=\"line\">&quot; different version somewhere else.</div><div class=\"line\">Plugin &apos;ascenator/L9&apos;, &#123;&apos;name&apos;: &apos;newL9&apos;&#125;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\">&quot; To ignore plugin indent changes, instead use:</div><div class=\"line\">&quot;filetype plugin on</div><div class=\"line\">&quot;</div><div class=\"line\">&quot; Brief help</div><div class=\"line\">&quot; :PluginList       - lists configured plugins</div><div class=\"line\">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</div><div class=\"line\">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</div><div class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</div><div class=\"line\">&quot;</div><div class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</div><div class=\"line\">&quot; Put your non-Plugin stuff after this line</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在Vim的命令行运行<code>:PluginInstall</code><br>也可以在shell的命令行运行:<code>vim +PluginInstall +qall</code></p>\n<h2 id=\"插件的推荐\"><a href=\"#插件的推荐\" class=\"headerlink\" title=\"插件的推荐\"></a>插件的推荐</h2><h3 id=\"NERD-Tree\"><a href=\"#NERD-Tree\" class=\"headerlink\" title=\"NERD Tree\"></a>NERD Tree</h3><p>NERD Tree是一个树形目录插件，方便浏览当前目录有哪些目录和文件。<br>在~/.vimrc文件中配置NERD Tree，设置一个启用或禁用NERD Tree的键映射<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;F5开启关闭树&quot;</div><div class=\"line\">nmap &lt;F5&gt; :NERDTreeToggle&lt;cr&gt;</div><div class=\"line\">let NERDTreeChDirMode=1</div><div class=\"line\">&quot;显示书签&quot;</div><div class=\"line\">let NERDTreeShowBookmarks=1</div><div class=\"line\">&quot;设置忽略文件类型&quot;</div><div class=\"line\">let NERDTreeIgnore=[&apos;\\~$&apos;, &apos;\\.pyc$&apos;, &apos;\\.swp$&apos;]</div><div class=\"line\">&quot;窗口大小&quot;</div><div class=\"line\">let NERDTreeWinSize=25</div></pre></td></tr></table></figure></p>\n<p>所以可以通过F5快捷启动或关闭树形目录。<br>NERD Tree提供一些常用快捷键来操作目录：</p>\n<p>通过hjkl来移动光标<br>o打开关闭文件或目录，如果想打开文件，必须光标移动到文件名<br>t在标签页中打开<br>s和i可以水平或纵向分割窗口打开文件<br>p到上层目录<br>P到根目录<br>K到同目录第一个节点<br>P到同目录最后一个节点</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>很多的IDE都提供对方法和类进行折叠的手段，只显示定义而不显示全部代码。<br>我们可以在.vimrc中添加下面的代码开启功能:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot; Enable folding</div><div class=\"line\">set foldmethod=indent</div><div class=\"line\">set foldlevel=99</div><div class=\"line\">&quot; Enable folding with the spacebar</div><div class=\"line\">nnoremap &lt;space&gt; za</div></pre></td></tr></table></figure></p>\n<p>这样空格键可以折叠了。<br>我们还可以使用插件SimplyFold。<br>在.vimrc中加入下面的代码，通过Vundle进行安装:<br><code>Plugin &#39;tmhedberg/SimpylFold&#39;</code><br>如果想要看到折叠代码的文档字符串<br><code>let g:SimpylFold_docstring_preview=1</code></p>\n","excerpt":"<p>对vim进行界面配置，以适应不同开发者的开发需求。<br>","more":"</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><p>你只要在Home目录下创建一个~/vimrc文件就可以配置vim了，如果想要所有用户生效，请修改/etc/vimrc。</p>\n<p>###常用配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible &quot; 关闭 vi 兼容模式</div><div class=\"line\">syntax on &quot; 自动语法高亮</div><div class=\"line\">colorscheme molokai &quot; 设定配色方案</div><div class=\"line\">set number &quot; 显示行号</div><div class=\"line\">set cursorline &quot; 突出显示当前行</div><div class=\"line\">set ruler &quot; 打开状态栏标尺</div><div class=\"line\">set shiftwidth=4 &quot; 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</div><div class=\"line\">set softtabstop=4 &quot; 使得按退格键时可以一次删掉 4 个空格</div><div class=\"line\">set tabstop=4 &quot; 设定 tab 长度为 4</div><div class=\"line\">set nobackup &quot; 覆盖文件时不备份</div><div class=\"line\">set autochdir &quot; 自动切换当前目录为当前文件所在的目录</div><div class=\"line\">filetype plugin indent on &quot; 开启插件</div><div class=\"line\">set backupcopy=yes &quot; 设置备份时的行为为覆盖</div><div class=\"line\">set ignorecase smartcase &quot; 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感</div><div class=\"line\">set nowrapscan &quot; 禁止在搜索到文件两端时重新搜索</div><div class=\"line\">set incsearch &quot; 输入搜索内容时就显示搜索结果</div><div class=\"line\">set hlsearch &quot; 搜索时高亮显示被找到的文本</div><div class=\"line\">set noerrorbells &quot; 关闭错误信息响铃</div><div class=\"line\">set novisualbell &quot; 关闭使用可视响铃代替呼叫</div><div class=\"line\">set t_vb= &quot; 置空错误铃声的终端代码</div><div class=\"line\">&quot; set showmatch &quot; 插入括号时，短暂地跳转到匹配的对应括号</div><div class=\"line\">&quot; set matchtime=2 &quot; 短暂跳转到匹配括号的时间</div><div class=\"line\">set magic &quot; 设置魔术</div><div class=\"line\">set hidden &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</div><div class=\"line\">set guioptions-=T &quot; 隐藏工具栏</div><div class=\"line\">set guioptions-=m &quot; 隐藏菜单栏</div><div class=\"line\">set smartindent &quot; 开启新行时使用智能自动缩进</div><div class=\"line\">set backspace=indent,eol,start</div><div class=\"line\">&quot; 不设定在插入状态无法用退格键和 Delete 键删除回车符</div><div class=\"line\">set cmdheight=1 &quot; 设定命令行的行数为 1</div><div class=\"line\">set laststatus=2 &quot; 显示状态栏 (默认值为 1, 无法显示状态栏)</div><div class=\"line\">set statusline=\\ %&lt;%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%&#123;&amp;fileformat&#125;\\ %&#123;&amp;encoding&#125;\\ %c:%l/%L%)\\ </div><div class=\"line\">&quot; 设置在状态行显示的信息</div><div class=\"line\">set foldenable &quot; 开始折叠</div><div class=\"line\">set foldmethod=syntax &quot; 设置语法折叠</div><div class=\"line\">set foldcolumn=0 &quot; 设置折叠区域的宽度</div><div class=\"line\">setlocal foldlevel=1 &quot; 设置折叠层数为</div><div class=\"line\">&quot; set foldclose=all &quot; 设置为自动关闭折叠 </div><div class=\"line\">&quot; nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</div><div class=\"line\">&quot; 用空格键来开关折叠</div></pre></td></tr></table></figure></p>\n<h3 id=\"一键执行\"><a href=\"#一键执行\" class=\"headerlink\" title=\"一键执行\"></a>一键执行</h3><p>很多时候完成代码后都要返回命令行执行，有时候会很麻烦，这时一键执行就实用很多。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">map &lt;F9&gt; :call CompileRunGcc()&lt;CR&gt;</div><div class=\"line\">func! CompileRunGcc()</div><div class=\"line\">    exec &quot;w&quot;</div><div class=\"line\">    if &amp;filetype == &apos;c&apos;</div><div class=\"line\">        exec &quot;!g++ % -o %&lt;&quot;</div><div class=\"line\">        exec &quot;!time ./%&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;cpp&apos;</div><div class=\"line\">        exec &quot;!g++ % -o %&lt;&quot;</div><div class=\"line\">        exec &quot;!time ./%&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;java&apos;</div><div class=\"line\">        exec &quot;!javac %&quot;</div><div class=\"line\">        exec &quot;!time java %&lt;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;sh&apos;</div><div class=\"line\">        :!time bash %</div><div class=\"line\">    elseif &amp;filetype == &apos;python&apos;</div><div class=\"line\">        exec &quot;!time python2.7 %&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;html&apos;</div><div class=\"line\">        exec &quot;!firefox % &amp;&quot;</div><div class=\"line\">    elseif &amp;filetype == &apos;mkd&apos;</div><div class=\"line\">        exec &quot;!~/.vim/markdown.pl % &gt; %.html &amp;&quot;</div><div class=\"line\">        exec &quot;!firefox %.html &amp;&quot;</div><div class=\"line\">    endif</div><div class=\"line\">endfunc</div></pre></td></tr></table></figure></p>\n<p>另外一种方法：<br><code>au BufRead *.py map &lt;buffer&gt; &lt;F9&gt; :w&lt;CR&gt;:!/usr/bin/env python % &lt;CR&gt;</code></p>\n<h2 id=\"插件管理与Vundle\"><a href=\"#插件管理与Vundle\" class=\"headerlink\" title=\"插件管理与Vundle\"></a>插件管理与Vundle</h2><p>插件的管理是vim配置中非常重要的一个内容，因为单纯的修改.vimrc并不能完全满足我们的需求，这时候我们就需要插件了。而在插件管理上现在最常用的有Vundle，pathon等。这里我们暂时只记录Vundle插件管理工具的配置过程。</p>\n<h3 id=\"Vundle安装\"><a href=\"#Vundle安装\" class=\"headerlink\" title=\"Vundle安装\"></a>Vundle安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>将以下的命令置入你的.vimrc文件中，可以根据注释移除你不想要的插件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">set nocompatible              &quot; be iMproved, required</div><div class=\"line\">filetype off                  &quot; required</div><div class=\"line\"></div><div class=\"line\">&quot; set the runtime path to include Vundle and initialize</div><div class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</div><div class=\"line\">call vundle#begin()</div><div class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</div><div class=\"line\">&quot;call vundle#begin(&apos;~/some/path/here&apos;)</div><div class=\"line\"></div><div class=\"line\">&quot; let Vundle manage Vundle, required</div><div class=\"line\">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class=\"line\"></div><div class=\"line\">&quot; The following are examples of different formats supported.</div><div class=\"line\">&quot; Keep Plugin commands between vundle#begin/end.</div><div class=\"line\">&quot; plugin on GitHub repo</div><div class=\"line\">Plugin &apos;tpope/vim-fugitive&apos;</div><div class=\"line\">&quot; plugin from http://vim-scripts.org/vim/scripts.html</div><div class=\"line\">Plugin &apos;L9&apos;</div><div class=\"line\">&quot; Git plugin not hosted on GitHub</div><div class=\"line\">Plugin &apos;git://git.wincent.com/command-t.git&apos;</div><div class=\"line\">&quot; git repos on your local machine (i.e. when working on your own plugin)</div><div class=\"line\">Plugin &apos;file:///home/gmarik/path/to/plugin&apos;</div><div class=\"line\">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</div><div class=\"line\">&quot; Pass the path to set the runtimepath properly.</div><div class=\"line\">Plugin &apos;rstacruz/sparkup&apos;, &#123;&apos;rtp&apos;: &apos;vim/&apos;&#125;</div><div class=\"line\">&quot; Install L9 and avoid a Naming conflict if you&apos;ve already installed a</div><div class=\"line\">&quot; different version somewhere else.</div><div class=\"line\">Plugin &apos;ascenator/L9&apos;, &#123;&apos;name&apos;: &apos;newL9&apos;&#125;</div><div class=\"line\"></div><div class=\"line\">&quot; All of your Plugins must be added before the following line</div><div class=\"line\">call vundle#end()            &quot; required</div><div class=\"line\">filetype plugin indent on    &quot; required</div><div class=\"line\">&quot; To ignore plugin indent changes, instead use:</div><div class=\"line\">&quot;filetype plugin on</div><div class=\"line\">&quot;</div><div class=\"line\">&quot; Brief help</div><div class=\"line\">&quot; :PluginList       - lists configured plugins</div><div class=\"line\">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</div><div class=\"line\">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</div><div class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</div><div class=\"line\">&quot;</div><div class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</div><div class=\"line\">&quot; Put your non-Plugin stuff after this line</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在Vim的命令行运行<code>:PluginInstall</code><br>也可以在shell的命令行运行:<code>vim +PluginInstall +qall</code></p>\n<h2 id=\"插件的推荐\"><a href=\"#插件的推荐\" class=\"headerlink\" title=\"插件的推荐\"></a>插件的推荐</h2><h3 id=\"NERD-Tree\"><a href=\"#NERD-Tree\" class=\"headerlink\" title=\"NERD Tree\"></a>NERD Tree</h3><p>NERD Tree是一个树形目录插件，方便浏览当前目录有哪些目录和文件。<br>在~/.vimrc文件中配置NERD Tree，设置一个启用或禁用NERD Tree的键映射<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;F5开启关闭树&quot;</div><div class=\"line\">nmap &lt;F5&gt; :NERDTreeToggle&lt;cr&gt;</div><div class=\"line\">let NERDTreeChDirMode=1</div><div class=\"line\">&quot;显示书签&quot;</div><div class=\"line\">let NERDTreeShowBookmarks=1</div><div class=\"line\">&quot;设置忽略文件类型&quot;</div><div class=\"line\">let NERDTreeIgnore=[&apos;\\~$&apos;, &apos;\\.pyc$&apos;, &apos;\\.swp$&apos;]</div><div class=\"line\">&quot;窗口大小&quot;</div><div class=\"line\">let NERDTreeWinSize=25</div></pre></td></tr></table></figure></p>\n<p>所以可以通过F5快捷启动或关闭树形目录。<br>NERD Tree提供一些常用快捷键来操作目录：</p>\n<p>通过hjkl来移动光标<br>o打开关闭文件或目录，如果想打开文件，必须光标移动到文件名<br>t在标签页中打开<br>s和i可以水平或纵向分割窗口打开文件<br>p到上层目录<br>P到根目录<br>K到同目录第一个节点<br>P到同目录最后一个节点</p>\n<h3 id=\"代码折叠\"><a href=\"#代码折叠\" class=\"headerlink\" title=\"代码折叠\"></a>代码折叠</h3><p>很多的IDE都提供对方法和类进行折叠的手段，只显示定义而不显示全部代码。<br>我们可以在.vimrc中添加下面的代码开启功能:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot; Enable folding</div><div class=\"line\">set foldmethod=indent</div><div class=\"line\">set foldlevel=99</div><div class=\"line\">&quot; Enable folding with the spacebar</div><div class=\"line\">nnoremap &lt;space&gt; za</div></pre></td></tr></table></figure></p>\n<p>这样空格键可以折叠了。<br>我们还可以使用插件SimplyFold。<br>在.vimrc中加入下面的代码，通过Vundle进行安装:<br><code>Plugin &#39;tmhedberg/SimpylFold&#39;</code><br>如果想要看到折叠代码的文档字符串<br><code>let g:SimpylFold_docstring_preview=1</code></p>"},{"title":"为Git设置代理","date":"2016-11-12T14:51:33.000Z","_content":"在使用git进行clone或者push操作的时候，由于众所周知的原因，网络速度经常慢到只有几kb/s，所以我们可以通过为Git设置代理的方法加快git的网络速度。\n<!-- more -->\n## HTTP协议\nGit 使用 libcurl 提供 http 支持，所以直接在 git 配置文件中加入\n~~~\n[http]\nproxy = socks5://127.0.0.1:1080\n~~~\n或者使用git的配置http.config:\n~~~\n$ git config http.config socks5://127.0.0.1:1080\n~~~\n也可以使用环境变量\n~~~\n$ export HTTPS_PROXY=socks5://127.0.0.1:1080\n~~~\n但是环境变量只能全局使用，虽然也可以根据不同的仓库进行配置，然而需要我们在每次使用的时候加上env\n~~~\n$ env HTTPS_PROXY=socks5://127.0.0.1:1080 git pull\n~~~\n## SSH协议\n建立`/path/to/soks5proxyssh`文件\nshell运行\n~~~\n#!/bin/sh\nssh -o ProxyCommand=\"/path/to/socks5proxywrapper %h %p\" \"$@\"\n~~~\n配置git使用该wrapper\n~~~\nexport GIT_SSH=\"/path/to/socks5proxyssh“\n~~~\n\n修改ssh配置文件.ssh/config\n~~~\nHost github.com\n        ProxyCommand nc -X 5 127.0.0.1:1080 %h %p\n~~~\nssh配置参考man ssh_comfig\nnc命令参考nc\n去掉Host整行的话，SSH代理就成为全局模式。\n\n## GIT 协议\n建立 /path/to/socks5proxywrapper 文件，使用 [connect]:(https://bitbucket.org/gotoh/connect) 工具进行代理的转换，各发行版一般打包为 proxy-connect 或者 connect-proxy。\n编译并且更改权限\n~~~\n$ gcc -o connect connect.c\n$ sudo chmod +x connect\n$ mv connect ~/bin/connect\n~~~\nshell下运行\n~~~\n#!/bin/sh\nconnect -S 127.0.0.1:7070 \"$@\"\n~~~\n配置 ~/.gitconfig\n~~~\n[core]\n        gitproxy = /path/to/socks5proxywrapper\n~~~\n或者直接设置环境变量\n~~~\nexport GIT_PROXY_COMMAND=\"/path/to/socks5proxywrapper\"\n~~~\n","source":"_posts/为Git设置代理.md","raw":"---\ntitle: 为Git设置代理\ndate: 2016-11-12 22:51:33\ntags:\n- Git\n---\n在使用git进行clone或者push操作的时候，由于众所周知的原因，网络速度经常慢到只有几kb/s，所以我们可以通过为Git设置代理的方法加快git的网络速度。\n<!-- more -->\n## HTTP协议\nGit 使用 libcurl 提供 http 支持，所以直接在 git 配置文件中加入\n~~~\n[http]\nproxy = socks5://127.0.0.1:1080\n~~~\n或者使用git的配置http.config:\n~~~\n$ git config http.config socks5://127.0.0.1:1080\n~~~\n也可以使用环境变量\n~~~\n$ export HTTPS_PROXY=socks5://127.0.0.1:1080\n~~~\n但是环境变量只能全局使用，虽然也可以根据不同的仓库进行配置，然而需要我们在每次使用的时候加上env\n~~~\n$ env HTTPS_PROXY=socks5://127.0.0.1:1080 git pull\n~~~\n## SSH协议\n建立`/path/to/soks5proxyssh`文件\nshell运行\n~~~\n#!/bin/sh\nssh -o ProxyCommand=\"/path/to/socks5proxywrapper %h %p\" \"$@\"\n~~~\n配置git使用该wrapper\n~~~\nexport GIT_SSH=\"/path/to/socks5proxyssh“\n~~~\n\n修改ssh配置文件.ssh/config\n~~~\nHost github.com\n        ProxyCommand nc -X 5 127.0.0.1:1080 %h %p\n~~~\nssh配置参考man ssh_comfig\nnc命令参考nc\n去掉Host整行的话，SSH代理就成为全局模式。\n\n## GIT 协议\n建立 /path/to/socks5proxywrapper 文件，使用 [connect]:(https://bitbucket.org/gotoh/connect) 工具进行代理的转换，各发行版一般打包为 proxy-connect 或者 connect-proxy。\n编译并且更改权限\n~~~\n$ gcc -o connect connect.c\n$ sudo chmod +x connect\n$ mv connect ~/bin/connect\n~~~\nshell下运行\n~~~\n#!/bin/sh\nconnect -S 127.0.0.1:7070 \"$@\"\n~~~\n配置 ~/.gitconfig\n~~~\n[core]\n        gitproxy = /path/to/socks5proxywrapper\n~~~\n或者直接设置环境变量\n~~~\nexport GIT_PROXY_COMMAND=\"/path/to/socks5proxywrapper\"\n~~~\n","slug":"为Git设置代理","published":1,"updated":"2019-02-15T11:53:24.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs6g9psq0006yjfjp5od7ar4","content":"<p>在使用git进行clone或者push操作的时候，由于众所周知的原因，网络速度经常慢到只有几kb/s，所以我们可以通过为Git设置代理的方法加快git的网络速度。<br><a id=\"more\"></a></p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>Git 使用 libcurl 提供 http 支持，所以直接在 git 配置文件中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[http]</div><div class=\"line\">proxy = socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>或者使用git的配置http.config:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config http.config socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>也可以使用环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ export HTTPS_PROXY=socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>但是环境变量只能全局使用，虽然也可以根据不同的仓库进行配置，然而需要我们在每次使用的时候加上env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ env HTTPS_PROXY=socks5://127.0.0.1:1080 git pull</div></pre></td></tr></table></figure></p>\n<h2 id=\"SSH协议\"><a href=\"#SSH协议\" class=\"headerlink\" title=\"SSH协议\"></a>SSH协议</h2><p>建立<code>/path/to/soks5proxyssh</code>文件<br>shell运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">ssh -o ProxyCommand=&quot;/path/to/socks5proxywrapper %h %p&quot; &quot;$@&quot;</div></pre></td></tr></table></figure></p>\n<p>配置git使用该wrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GIT_SSH=&quot;/path/to/socks5proxyssh“</div></pre></td></tr></table></figure></p>\n<p>修改ssh配置文件.ssh/config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">        ProxyCommand nc -X 5 127.0.0.1:1080 %h %p</div></pre></td></tr></table></figure></p>\n<p>ssh配置参考man ssh_comfig<br>nc命令参考nc<br>去掉Host整行的话，SSH代理就成为全局模式。</p>\n<h2 id=\"GIT-协议\"><a href=\"#GIT-协议\" class=\"headerlink\" title=\"GIT 协议\"></a>GIT 协议</h2><p>建立 /path/to/socks5proxywrapper 文件，使用 [connect]:(<a href=\"https://bitbucket.org/gotoh/connect\" target=\"_blank\" rel=\"external\">https://bitbucket.org/gotoh/connect</a>) 工具进行代理的转换，各发行版一般打包为 proxy-connect 或者 connect-proxy。<br>编译并且更改权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcc -o connect connect.c</div><div class=\"line\">$ sudo chmod +x connect</div><div class=\"line\">$ mv connect ~/bin/connect</div></pre></td></tr></table></figure></p>\n<p>shell下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">connect -S 127.0.0.1:7070 &quot;$@&quot;</div></pre></td></tr></table></figure></p>\n<p>配置 ~/.gitconfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[core]</div><div class=\"line\">        gitproxy = /path/to/socks5proxywrapper</div></pre></td></tr></table></figure></p>\n<p>或者直接设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GIT_PROXY_COMMAND=&quot;/path/to/socks5proxywrapper&quot;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>在使用git进行clone或者push操作的时候，由于众所周知的原因，网络速度经常慢到只有几kb/s，所以我们可以通过为Git设置代理的方法加快git的网络速度。<br>","more":"</p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>Git 使用 libcurl 提供 http 支持，所以直接在 git 配置文件中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[http]</div><div class=\"line\">proxy = socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>或者使用git的配置http.config:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config http.config socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>也可以使用环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ export HTTPS_PROXY=socks5://127.0.0.1:1080</div></pre></td></tr></table></figure></p>\n<p>但是环境变量只能全局使用，虽然也可以根据不同的仓库进行配置，然而需要我们在每次使用的时候加上env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ env HTTPS_PROXY=socks5://127.0.0.1:1080 git pull</div></pre></td></tr></table></figure></p>\n<h2 id=\"SSH协议\"><a href=\"#SSH协议\" class=\"headerlink\" title=\"SSH协议\"></a>SSH协议</h2><p>建立<code>/path/to/soks5proxyssh</code>文件<br>shell运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">ssh -o ProxyCommand=&quot;/path/to/socks5proxywrapper %h %p&quot; &quot;$@&quot;</div></pre></td></tr></table></figure></p>\n<p>配置git使用该wrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GIT_SSH=&quot;/path/to/socks5proxyssh“</div></pre></td></tr></table></figure></p>\n<p>修改ssh配置文件.ssh/config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">        ProxyCommand nc -X 5 127.0.0.1:1080 %h %p</div></pre></td></tr></table></figure></p>\n<p>ssh配置参考man ssh_comfig<br>nc命令参考nc<br>去掉Host整行的话，SSH代理就成为全局模式。</p>\n<h2 id=\"GIT-协议\"><a href=\"#GIT-协议\" class=\"headerlink\" title=\"GIT 协议\"></a>GIT 协议</h2><p>建立 /path/to/socks5proxywrapper 文件，使用 [connect]:(<a href=\"https://bitbucket.org/gotoh/connect\">https://bitbucket.org/gotoh/connect</a>) 工具进行代理的转换，各发行版一般打包为 proxy-connect 或者 connect-proxy。<br>编译并且更改权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcc -o connect connect.c</div><div class=\"line\">$ sudo chmod +x connect</div><div class=\"line\">$ mv connect ~/bin/connect</div></pre></td></tr></table></figure></p>\n<p>shell下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">connect -S 127.0.0.1:7070 &quot;$@&quot;</div></pre></td></tr></table></figure></p>\n<p>配置 ~/.gitconfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[core]</div><div class=\"line\">        gitproxy = /path/to/socks5proxywrapper</div></pre></td></tr></table></figure></p>\n<p>或者直接设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export GIT_PROXY_COMMAND=&quot;/path/to/socks5proxywrapper&quot;</div></pre></td></tr></table></figure></p>"},{"title":"灯下漫笔","date":"2016-06-21T12:37:30.000Z","_content":">一点自我反省\n\n<!-- more -->\n\n提起阿q，就想起他被人揍之后自言自语“又被儿子打了”的得意样子，也总喜欢借用孔乙己的那段“读书人的事，偷书能算偷吗？“来讥讽现实。人喜欢为那些自己吃过的苦，干过的事，以及正在做的事，找一个正确的理由来欺骗自己。\n\n我发觉自己也逐渐走入了这样一种自欺的状态，编程确实是我选择想要走的路，但最为可怕的是在两条路交替的来回徘徊，最后发现仍然还在起点。整天的胡思乱想，占用教室时间学python，然而空闲时间却又无所事事，不停的用自己的爱好来为逃避找借口。真正的编程能力也没有多大提高。\n\n既然做了决定，就得下点狠功夫。在python方面，也感觉自己像全都打在沙包上有力用不出的感觉，一直庞杂的知识点牵着鼻子走。我感到我必须学会如何去掌握主动，不应该是我应该去学什么，而应该是我想去学什么。明白自己想要什么，再拟定策略择最优。\n\n曾子说“五日三省吾身”，人自省不是为了和自己过不去，而是去认识你自己。同样，我在博客里写自己踏过的坑，犯过的错，也是为了去拥抱最真实的自己。\n\n二十多岁，经历过懵懂叛逆，也应该学会和自己握手言和，去面对那茫茫未知的新世界了。\n\n\n","source":"_posts/灯下漫笔.md","raw":"---\ntitle: 灯下漫笔\ndate: 2016-6-21 20:37:30\ntags:\n- 生活\n---\n>一点自我反省\n\n<!-- more -->\n\n提起阿q，就想起他被人揍之后自言自语“又被儿子打了”的得意样子，也总喜欢借用孔乙己的那段“读书人的事，偷书能算偷吗？“来讥讽现实。人喜欢为那些自己吃过的苦，干过的事，以及正在做的事，找一个正确的理由来欺骗自己。\n\n我发觉自己也逐渐走入了这样一种自欺的状态，编程确实是我选择想要走的路，但最为可怕的是在两条路交替的来回徘徊，最后发现仍然还在起点。整天的胡思乱想，占用教室时间学python，然而空闲时间却又无所事事，不停的用自己的爱好来为逃避找借口。真正的编程能力也没有多大提高。\n\n既然做了决定，就得下点狠功夫。在python方面，也感觉自己像全都打在沙包上有力用不出的感觉，一直庞杂的知识点牵着鼻子走。我感到我必须学会如何去掌握主动，不应该是我应该去学什么，而应该是我想去学什么。明白自己想要什么，再拟定策略择最优。\n\n曾子说“五日三省吾身”，人自省不是为了和自己过不去，而是去认识你自己。同样，我在博客里写自己踏过的坑，犯过的错，也是为了去拥抱最真实的自己。\n\n二十多岁，经历过懵懂叛逆，也应该学会和自己握手言和，去面对那茫茫未知的新世界了。\n\n\n","slug":"灯下漫笔","published":1,"updated":"2019-02-15T11:53:24.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs6g9pss0009yjfjvkl2l4ia","content":"<blockquote>\n<p>一点自我反省</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>提起阿q，就想起他被人揍之后自言自语“又被儿子打了”的得意样子，也总喜欢借用孔乙己的那段“读书人的事，偷书能算偷吗？“来讥讽现实。人喜欢为那些自己吃过的苦，干过的事，以及正在做的事，找一个正确的理由来欺骗自己。</p>\n<p>我发觉自己也逐渐走入了这样一种自欺的状态，编程确实是我选择想要走的路，但最为可怕的是在两条路交替的来回徘徊，最后发现仍然还在起点。整天的胡思乱想，占用教室时间学python，然而空闲时间却又无所事事，不停的用自己的爱好来为逃避找借口。真正的编程能力也没有多大提高。</p>\n<p>既然做了决定，就得下点狠功夫。在python方面，也感觉自己像全都打在沙包上有力用不出的感觉，一直庞杂的知识点牵着鼻子走。我感到我必须学会如何去掌握主动，不应该是我应该去学什么，而应该是我想去学什么。明白自己想要什么，再拟定策略择最优。</p>\n<p>曾子说“五日三省吾身”，人自省不是为了和自己过不去，而是去认识你自己。同样，我在博客里写自己踏过的坑，犯过的错，也是为了去拥抱最真实的自己。</p>\n<p>二十多岁，经历过懵懂叛逆，也应该学会和自己握手言和，去面对那茫茫未知的新世界了。</p>\n","excerpt":"<blockquote>\n<p>一点自我反省</p>\n</blockquote>","more":"<p>提起阿q，就想起他被人揍之后自言自语“又被儿子打了”的得意样子，也总喜欢借用孔乙己的那段“读书人的事，偷书能算偷吗？“来讥讽现实。人喜欢为那些自己吃过的苦，干过的事，以及正在做的事，找一个正确的理由来欺骗自己。</p>\n<p>我发觉自己也逐渐走入了这样一种自欺的状态，编程确实是我选择想要走的路，但最为可怕的是在两条路交替的来回徘徊，最后发现仍然还在起点。整天的胡思乱想，占用教室时间学python，然而空闲时间却又无所事事，不停的用自己的爱好来为逃避找借口。真正的编程能力也没有多大提高。</p>\n<p>既然做了决定，就得下点狠功夫。在python方面，也感觉自己像全都打在沙包上有力用不出的感觉，一直庞杂的知识点牵着鼻子走。我感到我必须学会如何去掌握主动，不应该是我应该去学什么，而应该是我想去学什么。明白自己想要什么，再拟定策略择最优。</p>\n<p>曾子说“五日三省吾身”，人自省不是为了和自己过不去，而是去认识你自己。同样，我在博客里写自己踏过的坑，犯过的错，也是为了去拥抱最真实的自己。</p>\n<p>二十多岁，经历过懵懂叛逆，也应该学会和自己握手言和，去面对那茫茫未知的新世界了。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjs6g9ps70000yjfjprecy7hf","tag_id":"cjs6g9psi0003yjfj2k37cb2n","_id":"cjs6g9pss0008yjfj8ifksuw3"},{"post_id":"cjs6g9psq0006yjfjp5od7ar4","tag_id":"cjs6g9psi0003yjfj2k37cb2n","_id":"cjs6g9psu000ayjfj2h7gmxim"},{"post_id":"cjs6g9psg0002yjfjl1tzpjl5","tag_id":"cjs6g9psr0007yjfjlx8aypue","_id":"cjs6g9psw000cyjfj44ofuh1f"},{"post_id":"cjs6g9psl0004yjfjpzfpord9","tag_id":"cjs6g9psv000byjfjm1wayuoq","_id":"cjs6g9psy000eyjfje5ymdib7"},{"post_id":"cjs6g9pss0009yjfjvkl2l4ia","tag_id":"cjs6g9psz000fyjfj5h4vvgsl","_id":"cjs6g9pt0000hyjfju5waxz71"}],"Tag":[{"name":"Git","_id":"cjs6g9psi0003yjfj2k37cb2n"},{"name":"Python","_id":"cjs6g9psr0007yjfjlx8aypue"},{"name":"vim","_id":"cjs6g9psv000byjfjm1wayuoq"},{"name":"生活","_id":"cjs6g9psz000fyjfj5h4vvgsl"}]}}